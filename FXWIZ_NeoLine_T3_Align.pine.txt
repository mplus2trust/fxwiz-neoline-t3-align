// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © mplus2trust

//@version=5
// This Pine Script® file contains portions derived from MPL-2.0 licensed work(s).
// This Source Code Form is subject to the terms of the Mozilla Public License v2.0:
// https://mozilla.org/MPL/2.0/
//
// Full source (including modifications and NOTICE) available at:
// https://github.com/mplus2trust/neoline-t3
// © 2025 mplus2trust (FXWIZ)


indicator("FXWIZ NeoLine–T3 Align", overlay=true, max_labels_count=500, max_lines_count=500)

//=====================================================
// FXWIZ NeoLine–T3 Align  (Invite-Only on TradingView)
//-----------------------------------------------------
// CONCEPT
// - NeoLine (BB+ATR) reversal engine
// - RSI-adaptive T3 line as an alignment filter
// - Single-bar BG highlight on alignment events
// - MTF table summarizes cross states (no lookahead)
//
// CREDITS & NOTICES
// - Portions inspired by publicly available MPL-2.0 implementations.
// - See repository NOTICE for acknowledgements and links.
//
// TERMS
// - Invite-Only distribution on TradingView; license compliance via public repo.
// - Not financial advice; trading involves risk.
//
// Author: Kai Kim (FXWIZ) with Genie
// Version: 1.0 | Last Updated: 2025-08-08
//=====================================================

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// SECTION 1: NeoLine (BB + ATR Based) + Signal
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
neoATRPeriod   = input.int(5,   title='ATR Period', minval=1)
neoBBPeriod    = input.int(21,  title='Bollinger Bands Period', minval=1)
neoBBDev       = input.float(1.0, title='BB Deviation', minval=0.1, step=0.1)
useATRFilter   = input.bool(true, title='Use ATR Filter')
showNeoSignals = input.bool(true, title='Show NeoLine Signals')

// ── Core Line Calculations ──
neoBBUpper     = ta.sma(close, neoBBPeriod) + ta.stdev(close, neoBBPeriod) * neoBBDev
neoBBLower     = ta.sma(close, neoBBPeriod) - ta.stdev(close, neoBBPeriod) * neoBBDev
neoATR         = ta.atr(neoATRPeriod)

var float neoLine = na
var int   neoSignal = 0
neoSignal := close > neoBBUpper ? 1 : close < neoBBLower ? -1 : neoSignal

if (neoSignal == 1)
    neoLine := useATRFilter ? low - neoATR : low
    if (neoLine < nz(neoLine[1]))
        neoLine := nz(neoLine[1])
else if (neoSignal == -1)
    neoLine := useATRFilter ? high + neoATR : high
    if (neoLine > nz(neoLine[1]))
        neoLine := nz(neoLine[1])

// ── Trend Direction for Signal ──
var int neoTrend = 0
neoTrend := nz(neoLine) > nz(neoLine[1]) ? 1 : nz(neoLine) < nz(neoLine[1]) ? -1 : neoTrend
neoLineColor = neoTrend > 0 ? #ffffff : #ffffffa7

// ── Entry Signal Logic ──
buyNeo  = neoTrend[1] == -1 and neoTrend == 1 ? 1 : na
sellNeo = neoTrend[1] == 1 and neoTrend == -1 ? 1 : na

// ── Plotting Line + Signal ──
plotNeo = plot(neoLine, color=neoLineColor, linewidth=2, title="Neo Line")

plotshape(buyNeo  and showNeoSignals ? neoLine - neoATR : na, text="▲", style=shape.labelup,   location=location.absolute, color=color.rgb(2,252,10), textcolor=#050202, size=size.tiny)
plotshape(sellNeo and showNeoSignals ? neoLine + neoATR : na, text="▼", style=shape.labeldown, location=location.absolute, color=#f70000,           textcolor=#050202, size=size.tiny)


//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// SECTION 2: Adaptive RSI T3 Line (reimplemented)
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
rsiLen   = input.int(14,  "RSI Length")
minLen   = input.int(5,   "Min T3 Length")
maxLen   = input.int(50,  "Max T3 Length")
t3Factor = input.float(0.7, "T3 Volume Factor", step=0.01, minval=0.1, maxval=2)

rsiValue    = ta.rsi(close, rsiLen)
rsiScale    = 1.0 - rsiValue / 100.0
adaptiveLen = math.round(minLen + (maxLen - minLen) * rsiScale)

// simple EMA for T3 blocks
customEma(source, length) =>
    alpha = 2.0 / (length + 1.0)
    var float ema = na
    ema := na(ema[1]) ? source : alpha * source + (1 - alpha) * ema[1]

// cascaded EMAs
e1 = customEma(close, adaptiveLen)
e2 = customEma(e1,    adaptiveLen)
e3 = customEma(e2,    adaptiveLen)
e4 = customEma(e3,    adaptiveLen)
e5 = customEma(e4,    adaptiveLen)
e6 = customEma(e5,    adaptiveLen)

// T3 coefficients
c1 = -t3Factor * t3Factor * t3Factor
c2 =  3 * t3Factor * t3Factor + 3 * t3Factor * t3Factor * t3Factor
c3 = -6 * t3Factor * t3Factor - 3 * t3Factor - 3 * t3Factor * t3Factor * t3Factor
c4 =  1 + 3 * t3Factor + t3Factor * t3Factor * t3Factor + 3 * t3Factor * t3Factor

t3Line  = c1 * e6 + c2 * e5 + c3 * e4 + c4 * e3
t3Color = t3Line > t3Line[2] ? #40ff6d : #ff3a3a

plot(t3Line,    color=t3Color, linewidth=2, title="T3 Line")
plot(t3Line[2], color=t3Color, linewidth=1, title="2nd T3 Line", display=display.none)
plotchar(ta.cross(t3Line, t3Line[2]) ? t3Line : na, title="T3 Cross", char="✪", location=location.absolute, color=t3Color, size=size.tiny)


//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// SECTION 3: BG Align Logic (single-bar highlight)
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
showBG          = input.bool(true, "➔ Show Align BG (on align moment only)")
instantOnSignal = input.bool(true, "➔ If aligned at signal, show BG immediately")

bgGreen = color.new(color.rgb(0,255,128), 89)
bgRed   = color.new(color.rgb(255,60,100), 85)

// keep trade mode after signal
var int tradeMode = 0
if (nz(buyNeo) == 1)
    tradeMode := 1
else if (nz(sellNeo) == 1)
    tradeMode := -1
else
    tradeMode := nz(tradeMode[1], 0)

// alignment events
buyAlignEvent  = tradeMode == 1  and (ta.crossover(neoLine, t3Line)  or (instantOnSignal and nz(buyNeo)  == 1 and neoLine > t3Line))
sellAlignEvent = tradeMode == -1 and (ta.crossunder(neoLine, t3Line) or (instantOnSignal and nz(sellNeo) == 1 and neoLine < t3Line))

bgcolor(showBG and buyAlignEvent  ? bgGreen : na)
bgcolor(showBG and sellAlignEvent ? bgRed   : na)


//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// SECTION 4: MTF Signal Table (no lookahead)
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
t1 = "1",  t2 = "5", t3 = "15", t4 = "30", t5 = "60"
green = #47d3c5, red = #d242ec

var int trend = 0
if ta.crossover(neoLine, t3Line)
    trend := 1
if ta.crossunder(neoLine, t3Line)
    trend := -1

f_tf(sigTf) =>
    request.security(syminfo.tickerid, sigTf, trend, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_off)

s1 = f_tf(t1), s2 = f_tf(t2), s3 = f_tf(t3), s4 = f_tf(t4), s5 = f_tf(t5)

sTxt(v) => v ==  1 ? "BULL" : v == -1 ? "BEAR" : ""
sCol(v) => v ==  1 ? color.new(green, 20) : v == -1 ? color.new(red, 20) : na

var table mtfTable = na
if na(mtfTable)
    mtfTable := table.new(position.top_right, 2, 6, border_width=1)

if barstate.islast
    table.cell(mtfTable, 0, 0, "TF",     text_color=color.white)
    table.cell(mtfTable, 1, 0, "Signal", text_color=color.white)

    table.cell(mtfTable, 0, 1, "1m",  text_color=color.white)
    table.cell(mtfTable, 1, 1, sTxt(s1), text_color=#000000, bgcolor=sCol(s1))

    table.cell(mtfTable, 0, 2, "5m",  text_color=color.white)
    table.cell(mtfTable, 1, 2, sTxt(s2), text_color=#000000, bgcolor=sCol(s2))

    table.cell(mtfTable, 0, 3, "15m", text_color=color.white)
    table.cell(mtfTable, 1, 3, sTxt(s3), text_color=#000000, bgcolor=sCol(s3))

    table.cell(mtfTable, 0, 4, "30m", text_color=color.white)
    table.cell(mtfTable, 1, 4, sTxt(s4), text_color=#000000, bgcolor=sCol(s4))

    table.cell(mtfTable, 0, 5, "60m", text_color=color.white)
    table.cell(mtfTable, 1, 5, sTxt(s5), text_color=#000000, bgcolor=sCol(s5))


//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// SECTION 5: Alerts (as requested)
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
alertcondition(buyNeo,          title="NeoLine Trend BUY",  message="NeoLine trend flipped UP")
alertcondition(sellNeo,         title="NeoLine Trend SELL", message="NeoLine trend flipped DOWN")
alertcondition(buyAlignEvent,   title="ALIGN BUY",          message="NeoLine crossed ABOVE T3 while in BUY mode")
alertcondition(sellAlignEvent,  title="ALIGN SELL",         message="NeoLine crossed BELOW T3 while in SELL mode")
